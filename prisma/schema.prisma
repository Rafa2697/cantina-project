generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Admin {
  id        String   @id @default(cuid())
  name      String?
  email     String?  @unique
  password  String?
  image     String?
  createdAt DateTime @default(now())
  unidade   String?
}

model User {
  id        String    @id @default(cuid())
  name      String?
  email     String?   @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  image     String?
  password  String?
  accounts  Account?
  sessions  Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @unique
  type              String
  provider          String
  providerAccountId String  @unique
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MenuItem {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Decimal
  categoryId  String
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  imagemURL   String?
  unidade     String?
  category    Category @relation(fields: [categoryId], references: [id])
}

model Category {
  id        String     @id @default(uuid())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     MenuItem[]
}

model Order {
  id         String      @id @default(uuid())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  totalPrice Decimal
  userEmail  String
  userName   String
  status     String      @default("PENDENTE")
  items      OrderItem[]
}

model OrderItem {
  id       String  @id @default(uuid())
  orderId  String
  quantity Int
  price    Decimal
  foodId   String
  name     String
  subtotal Decimal
  order    Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  CUSTOMER
}

enum OrderStatus {
  PENDING
  PREPARING
  READY
  DELIVERED
  CANCELLED
}
