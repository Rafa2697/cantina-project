generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Admin {
  id        String   @id @default(cuid())
  name      String?
  email     String?  @unique
  password  String?
  image     String?
  createdAt DateTime @default(now())
}

model User {
  id        String    @id @default(cuid()) // NextAuth usa "cuid" por padrão
  name      String?
  email     String?   @unique
  password  String?
  image     String?
  accounts  Account[]
  sessions  Session[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @unique
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String
  provider          String
  providerAccountId String  @unique
  refresh_token     String?
  access_token      String?
  expires_at        Int?
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
}

model MenuItem {
  id          String      @id @default(uuid())
  name        String
  description String?
  price       Decimal
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  String
  isAvailable Boolean     @default(true)
  imagemURL   String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Category {
  id        String     @id @default(uuid())
  name      String     @unique
  items     MenuItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Order {
  id         String    @id @default(uuid()) // ID único do pedido
  userName   String    // Nome do usuário autenticado pelo Google
  userEmail  String    // Email do usuário autenticado pelo Google
  status     String    @default("PENDENTE") // Status do pedido
  totalPrice Decimal   // Preço total do pedido
  createdAt  DateTime  @default(now()) // Data de criação
  updatedAt  DateTime  @updatedAt // Data de atualização

  items      OrderItem[] // Relacionamento com os itens do pedido
}

model OrderItem {
  id       String  @id @default(uuid()) // ID único do item no pedido
  orderId  String  // Chave estrangeira para o pedido
  foodId   String  // ID do alimento
  name     String  // Nome do alimento
  price    Decimal // Preço do item no momento do pedido
  quantity Int     // Quantidade do item
  subtotal Decimal // price * quantity

  order    Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  CUSTOMER
}

enum OrderStatus {
  PENDING
  PREPARING
  READY
  DELIVERED
  CANCELLED
}
